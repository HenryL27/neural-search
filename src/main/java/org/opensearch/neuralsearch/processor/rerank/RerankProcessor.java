/*
 * Copyright 2023 Aryn
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.opensearch.neuralsearch.processor.rerank;

import java.util.Map;

import org.opensearch.action.search.SearchRequest;
import org.opensearch.action.search.SearchResponse;
import org.opensearch.core.action.ActionListener;
import org.opensearch.search.pipeline.SearchResponseProcessor;

public interface RerankProcessor extends SearchResponseProcessor {

    public static final String TYPE = "rerank";

    /**
     * Generate the information that this processor needs in order to rerank.
     * That could be as simple as grabbing a field from the search request or
     * as complicated as a lookup to some external service
     * @param searchRequest the search query
     * @param searchResponse the search results, in case they're relevant
     * @param listener be async
     */
    public void generateScoringContext(
        SearchRequest searchRequest,
        SearchResponse searchResponse,
        ActionListener<Map<String, Object>> listener
    );

    /**
     * Given the scoring context generated by the processor and the search results,
     * rerank the search results. Do so asynchronously.
     * @param searchResponse the search results to rerank
     * @param scoringContext the information this processor needs in order to rerank
     * @param listener be async
     */
    public void rerank(SearchResponse searchResponse, Map<String, Object> scoringContext, ActionListener<SearchResponse> listener);

    @Override
    default void processResponseAsync(SearchRequest request, SearchResponse response, ActionListener<SearchResponse> responseListener) {
        try {
            generateScoringContext(
                request,
                response,
                ActionListener.wrap(context -> { rerank(response, context, responseListener); }, e -> { responseListener.onFailure(e); })
            );
        } catch (Exception e) {
            responseListener.onFailure(e);
        }
    }
}
